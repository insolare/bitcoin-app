/*
 * Bitcoin-app API
 *
 * Minimal API for bitcoin-app configuration
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apiserver

import (
	"encoding/json"
	"net/http"
	"strings"
)

// DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service      DefaultApiServicer
	errorHandler ErrorHandler
}

// DefaultApiOption for how the controller is set up.
type DefaultApiOption func(*DefaultApiController)

// WithDefaultApiErrorHandler inject ErrorHandler into controller
func WithDefaultApiErrorHandler(h ErrorHandler) DefaultApiOption {
	return func(c *DefaultApiController) {
		c.errorHandler = h
	}
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer, opts ...DefaultApiOption) Router {
	controller := &DefaultApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"AddCurrencyToProjectPost",
			strings.ToUpper("Post"),
			"/v1/addCurrencyToProject",
			c.AddCurrencyToProjectPost,
		},
		{
			"ConfigEndpointPost",
			strings.ToUpper("Post"),
			"/v1/config/endpoint",
			c.ConfigEndpointPost,
		},
		{
			"ConfigGet",
			strings.ToUpper("Get"),
			"/v1/config",
			c.ConfigGet,
		},
		{
			"ConfigPollRatePost",
			strings.ToUpper("Post"),
			"/v1/config/poll_rate",
			c.ConfigPollRatePost,
		},
		{
			"ConfigTimeoutPost",
			strings.ToUpper("Post"),
			"/v1/config/timeout",
			c.ConfigTimeoutPost,
		},
	}
}

// AddCurrencyToProjectPost -
func (c *DefaultApiController) AddCurrencyToProjectPost(w http.ResponseWriter, r *http.Request) {
	currencyUpdateParam := CurrencyUpdate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&currencyUpdateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCurrencyUpdateRequired(currencyUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddCurrencyToProjectPost(r.Context(), currencyUpdateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ConfigEndpointPost - Set new endpoint
func (c *DefaultApiController) ConfigEndpointPost(w http.ResponseWriter, r *http.Request) {
	configurationFieldUpdateParam := ConfigurationFieldUpdate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&configurationFieldUpdateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConfigurationFieldUpdateRequired(configurationFieldUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ConfigEndpointPost(r.Context(), configurationFieldUpdateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ConfigGet - Get current configuration
func (c *DefaultApiController) ConfigGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ConfigGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ConfigPollRatePost -
func (c *DefaultApiController) ConfigPollRatePost(w http.ResponseWriter, r *http.Request) {
	configurationFieldUpdateParam := ConfigurationFieldUpdate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&configurationFieldUpdateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConfigurationFieldUpdateRequired(configurationFieldUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ConfigPollRatePost(r.Context(), configurationFieldUpdateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ConfigTimeoutPost -
func (c *DefaultApiController) ConfigTimeoutPost(w http.ResponseWriter, r *http.Request) {
	configurationFieldUpdateParam := ConfigurationFieldUpdate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&configurationFieldUpdateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConfigurationFieldUpdateRequired(configurationFieldUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ConfigTimeoutPost(r.Context(), configurationFieldUpdateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
